{
    BBEditDocumentType = "CodelessLanguageModule";
    BBLMLanguageDisplayName = "Elixir";
    BBLMLanguageCode = elxr;
    BBLMColorsSyntax = YES;
    BBLMScansFunctions = YES;
    BBLMIsCaseSensitive = YES;
    
    BBLMKeywordList = (
		fn,
		function,
		def,
		do,
		do:,
		for:,
		end,
		defmodule,
		if,
		else,
		case,
		in,
		receive,
		after,
		try,
		catch,
		cond,
		defrecord,
		defrecordp,
		require,
		use,
		test,
		setup,
		teardown,
		defmacro,
		defmacrop,
		defdelegate,
		defexception,
		defimpl,
		defoverridable,
		defp,
		defprotocol,
		import,
		when,
		and,
		or,
		not,
		xor,
		lc,
		inlist,
		unless,
    );
    BBLMPredefinedNameList = (
        :true,
        :false,
        :ok,
        true,
        false,
        nil,
		:nil,
        
        is_alive,
        is_atom,
        is_binary,
        is_bitstring,
        is_boolean,
        is_exception,
        is_float,
        is_function,
        is_integer,
        is_list,
        is_number,
        is_pid,
        is_port,
        is_range,
        is_record,
        is_regex,
        is_reference,
        is_tuple,
        
        
        abs,
        atom_to_binary,
        atom_to_list,
        binary_part,
        binary_to_atom,
        binary_to_existing_atom,
        binary_to_float,
        binary_to_integer,
        binary_to_list,
        binary_to_term,
        bit_size,
        bitstring_to_list,
        byte_size,
        exit,
        div,
        elem,
        float,
        float_to_binary,
        float_to_list,
        "function_exported?",
        hd,
        integer_to_binary,
        integer_to_list,
        iolist_size,
        iolist_to_binary,
        length,
        list_to_atom,
        list_to_binary,
        list_to_bitstring,
        list_to_existing_atom,
        list_to_float,
        list_to_integer,
        list_to_pid,
        list_to_tuple,
        "macro_exported?",
        make_ref,
        "match?",
        max,
        min,
        "nil?",
        node,
        pid_to_list,
        raise,
        rem,
        round,
        self,
        size,
        spawn,
        spawn_link,
        term_to_binary,
        throw,
        tl,
        to_binary,
        to_char_list,
        trunc,
        tuple_size,
        tuple_to_list,
        
        apply,
        delete_elem,
        destructure,
        elem,
        set_elem,
        insert_elem,
        
        inspect,
        quote,
        
        c,
        
        Access,
        ArgumentError,
        ArithmeticError,
        Code,
        Enum,
        Enumerable,
        Exception,
        File,
        IEx,
        IO,
        Kernel,
        Keyword,
        Module,
        Path,
        Port,
        Process,
        String,
        SyntaxError,
        System,
        
        Record,
        Tuple,
        Atom,
        List,
        BitString,
        Number,
        Function,
        PID,
        Port,
        Reference,
        Any,
        
        Behaviour,
        Bitwise,
        Binary,
        Dict,
        EEx,
        ExUnit,
        File,
        GenEvent,
        GenServer,
        ListDict,
        Macro,
        Mix,
        Node,
        OptionParser,
        Path,
        Protocol,
        Regex,
        Supervisor,
        URI,
        
        :binary,
        :elixir_def,
        :elixir_module,
        :error,
        :exit,
        :kernel,
        :lists,
        :math,
        :throw,
        :erlang,
        :gen_server,
        :supervisor,
        :gen_event,
        
        :docs,
        :moduledoc,
        
        "@doc",
        "@only",
        "@moduledoc",
        "@type",
        "@spec",
        "@compile",
        "@behaviour",
        
        "%b",
        "%B",
        "%c",
        "%C",
        "%r",
        "%R",
        
        __MODULE__,
        __FILE__,
        __DIR__,
        __ENV__,
        __CALLER__,  
        
        assert,
    );
    BBLMSuffixMap = (
        {
            BBLMLanguageSuffix = ".ex";
        },
        {
            BBLMLanguageSuffix = ".exs";
        },
    );
    BBLMIsSourceKind = YES;
    BBLMIsHeaderKind = NO;
    "Language Features" = {
        "Close Block Comments" = "\"\"\"";
        "Close Parameter Lists" = ")";
        "Close Statement Blocks" = "end";
        "Close Strings 1" = "\"";
        "Close Strings 2" = "'";
        "End-of-line Ends Strings 1" = YES;
        "End-of-line Ends Strings 2" = YES;
        "Escape Char in Strings 1" = "\\";
        "Escape Char in Strings 2" = "\\";
        "Identifier and Keyword Characters" = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz:?@!%";
        "Open Block Comments" = "\"\"\"";
        "Open Line Comments" = "#";
        "Open Parameter Lists" = "(";
        "Open Statement Blocks" = "do";
        "Open Strings 1" = "\"";
        "Open Strings 2" = "'";
        "Prefix for Functions" = "def";
        "Prefix for Procedures" = "defmacro";
        "Terminator for Prototypes 1" = ";";
        "Terminator for Prototypes 2" = "";
    };
}
